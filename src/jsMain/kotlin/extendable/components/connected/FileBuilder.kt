package extendable.components.connected

import extendable.Architecture
import extendable.components.types.MutVal
import org.w3c.files.Blob
import org.w3c.files.BlobPropertyBag
import kotlin.js.Date


class FileBuilder {

    fun build(architecture: Architecture, format: ExportFormat, vararg settings: Setting): Blob {
        val content = mutableListOf<String>("Empty...")

        val date = Date(Date.now())
        try {
            when (format) {
                ExportFormat.VHDL -> {
                    var addrWidth = 32
                    var dataWidth = 256

                    if (settings.isNotEmpty()) {
                        settings.forEach {
                            when (it) {
                                is Setting.AddressWidth -> {
                                    addrWidth = it.bits
                                }

                                is Setting.DataWidth -> {
                                    dataWidth = it.bits
                                }
                            }
                        }
                    }

                    content.clear()
                    // Auto Generated
                    content.add(
                        "\n-- \n-- Generated by ${architecture.getName()} \n-- on ${date.toDateString()} ${date.toTimeString()}" +
                                "\n-- " +
                                "\n-- Input file:" +
                                "\n-- \t${architecture.getFileHandler().getCurrent().getName()}" +
                                "\n--" +
                                "\n-- Output file:" +
                                "\n-- \t${architecture.getFileHandler().getCurrNameWithoutType() + format.ending}" +
                                "\n-- "
                    )

                    val memInstances = architecture.getMemory().getMemMap().map { it.value }.sortedBy { it.address.getRawHexStr() }.toMutableList()

                    val vhdlItems = mutableListOf<VHDLItem>()


                    for (instance in memInstances) {
                        val rowAddr = (instance.address / MutVal.Value.Dec((dataWidth / 8).toString())).toHex()
                        val id = (instance.address % MutVal.Value.Dec((dataWidth / 8).toString())).toHex().getRawHexStr().toIntOrNull(16)

                        if (id != null) {
                            vhdlItems.add(VHDLItem(rowAddr, id, instance.mutVal.get().toHex().getRawHexStr()))
                        } else {
                            architecture.getConsole().error("FileBuilder: problems by calculating instance id from address ${rowAddr.getHexStr()}!")
                        }
                    }

                    console.log("VHDL ITEMS:${vhdlItems.joinToString { "\n\t${it.hexAddr.getHexStr()}:${it.id}:${it.hexContent}" }}")

                    val rowMap = mutableMapOf<String, String>()

                    while (true) {
                        val first = vhdlItems.firstOrNull()
                        if (first != null) {
                            var oldValue = rowMap[first.hexAddr.getRawHexStr()]
                            if (oldValue != null) {
                                val oldValueList = oldValue.chunked(2).toMutableList()
                                if (first.id >= oldValueList.size) {
                                    console.warn("out of range for id: ${first.id} content: ${first.hexContent} in $oldValueList")
                                }
                                oldValueList[first.id] = first.hexContent
                                oldValue = oldValueList.joinToString("") { it }
                            } else {
                                val oldValueList = "0".repeat(dataWidth / 4).chunked(2).toMutableList()
                                oldValueList[first.id] = first.hexContent
                                oldValue = oldValueList.joinToString("") { it }
                            }
                            rowMap[first.hexAddr.getRawHexStr()] = oldValue
                            vhdlItems.removeFirst()
                        } else {
                            break
                        }
                    }

                    rowMap.set("others", "0".repeat(dataWidth / 4))

                    // File Content
                    content.add(
                        "\n" +
                                "\nlibrary ieee;" +
                                "\nuse ieee.std_logic_1164.all;" +
                                "\n" +
                                "\npackage mem_contents is" +
                                "\n\tconstant ADDR_WIDTH : positive := $addrWidth;" +
                                "\n\tconstant DATA_WIDTH : positive := $dataWidth;" +
                                "\n\ttype mem_content_type is array (0 to 2**ADDR_WIDTH - 1) of std_logic_vector(DATA_WIDTH - 1 downto 0);" +
                                "\n\tconstant mem_content : mem_content_type := (${rowMap.toList().joinToString(",") { "\n\t\t${it.first.toLongOrNull(16) ?: it.first} => X\"${it.second}\"" }});" +
                                "\n\t" +
                                "\n\tconstant mem_used : positive := ${rowMap.size - 1};" +
                                "\nend mem_contents;" +
                                "\n"
                    )


                }

                ExportFormat.MIF -> {

                }

                ExportFormat.HEXDUMP -> {

                }
            }
        } catch (e: IndexOutOfBoundsException) {
            console.error(e)
        }


        val blob = Blob(content.toTypedArray(), BlobPropertyBag(type = "text/plain"))
        return blob
    }


    enum class ExportFormat(val ending: String) {
        VHDL("_pkg.vhd"),
        MIF(".mif"),
        HEXDUMP(".txt")
    }

    sealed class Setting(val name: String) {
        class AddressWidth(val bits: Int) : Setting("Address Width")
        class DataWidth(val bits: Int) : Setting("Data Width")
    }

    data class ExportFile(val filename: String, val blob: Blob)
    data class VHDLItem(val hexAddr: MutVal.Value.Hex, val id: Int, val hexContent: String)
}