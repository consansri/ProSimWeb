package extendable.components.connected

import extendable.Architecture
import org.w3c.files.Blob
import org.w3c.files.BlobPropertyBag
import kotlin.js.Date


class FileFormatter {

    fun build(architecture: Architecture, format: ExportFormat, vararg settings: Setting): Blob {
        val content = mutableListOf<String>("Empty...")

        val date = Date(Date.now())

        when (format) {
            ExportFormat.VHDL -> {
                var addrWidth: Int? = null
                var dataWidth: Int? = null

                if (settings.isNotEmpty()) {
                    settings.forEach {
                        when (it) {
                            is Setting.AddressWidth -> {
                                addrWidth = it.bits
                            }

                            is Setting.DataWidth -> {
                                dataWidth = it.bits
                            }
                        }
                    }
                }

                if (addrWidth == null || dataWidth == null) {
                    architecture.getConsole().error(
                        "Couldn't build file with current settings {${
                            settings.joinToString(", ") {
                                "${it.name}: " + when (it) {
                                    is Setting.AddressWidth -> it.bits.toString()
                                    is Setting.DataWidth -> it.bits.toString()
                                }
                            }
                        }}!"
                    )
                } else {
                    content.clear()
                    // Auto Generated
                    content.add(
                        "\n-- Generated by ${architecture.getName()} \non ${date.toDateString()} ${date.toTimeString()}" +
                                "\n-- " +
                                "\n-- Input file:" +
                                "\n-- \t${architecture.getFileHandler().getCurrent().getName()}" +
                                "\n--" +
                                "\n-- Output file:" +
                                "\n-- \t${architecture.getFileHandler().getCurrNameWithoutType() + format.ending}" +
                                "\n-- "
                    )

                    // File Content
                    content.add(
                        "\n" +
                                "\nlibrary ieee;" +
                                "\nuse ieee.std_logic_1164.all;" +
                                "\n" +
                                "\npackage mem_contents is" +
                                "\nconstant ADDR_WIDTH : positive := $addrWidth;" +
                                "\nconstant DATA_WIDTH : positive := $dataWidth;" +
                                "\ntype mem_content_type is array (0 to 2**ADDR_WIDTH - 1) of std_logic_vector(DATA_WIDTH - 1 downto 0);" +
                                "\n"
                    )

                }
            }

            ExportFormat.MIF -> {

            }

            ExportFormat.HEXDUMP -> {

            }
        }

        val blob = Blob(content.toTypedArray(), BlobPropertyBag(type = "text/plain"))
        return blob
    }


    enum class ExportFormat(val ending: String) {
        VHDL("_pkg.vhd"),
        MIF(".mif"),
        HEXDUMP(".txt")
    }

    sealed class Setting(val name: String) {
        class AddressWidth(val bits: Int) : Setting("Address Width")
        class DataWidth(val bits: Int) : Setting("Data Width")
    }

    data class ExportFile(val filename: String, val blob: Blob)

}