package cengine.psi.parser.pratt

import cengine.psi.parser.pratt.OpLoc.*

enum class OpType(val loc: OpLoc, val prec: OpPrec) {
    // Arithmetic
    ADD(INFIX, OpPrec.ADDITIVE),
    SUB(INFIX, OpPrec.ADDITIVE),
    MUL(INFIX, OpPrec.MULTIPLICATIVE),
    DIV(INFIX, OpPrec.MULTIPLICATIVE),
    MOD(INFIX, OpPrec.MULTIPLICATIVE),

    // Comparison
    EQUAL(INFIX, OpPrec.EQUALITY),
    NOT_EQUAL(INFIX, OpPrec.EQUALITY),
    LESS_THAN(INFIX, OpPrec.COMPARISON_RANGE),
    GREATER_THAN(INFIX, OpPrec.COMPARISON_RANGE),
    LESS_EQUAL(INFIX, OpPrec.COMPARISON_RANGE),
    GREATER_EQUAL(INFIX, OpPrec.COMPARISON_RANGE),

    // Logical
    LOGICAL_AND(INFIX, OpPrec.LOGICAL_AND),
    LOGICAL_OR(INFIX, OpPrec.LOGICAL_OR),
    LOGICAL_NOT(PREFIX, OpPrec.PREFIX_UNARY),

    // Assignment
    ASSIGN(INFIX, OpPrec.ASSIGNMENT),
    ADD_ASSIGN(INFIX, OpPrec.ASSIGNMENT),
    SUB_ASSIGN(INFIX, OpPrec.ASSIGNMENT),
    MUL_ASSIGN(INFIX, OpPrec.ASSIGNMENT),
    DIV_ASSIGN(INFIX, OpPrec.ASSIGNMENT),
    MOD_ASSIGN(INFIX, OpPrec.ASSIGNMENT),

    // Bitwise
    BITWISE_AND(INFIX, OpPrec.BITWISE_AND),
    BITWISE_OR(INFIX, OpPrec.BITWISE_OR),
    BITWISE_XOR(INFIX, OpPrec.BITWISE_XOR),
    BITWISE_NOT(PREFIX, OpPrec.PREFIX_UNARY),
    SHIFT_LEFT(INFIX, OpPrec.BITWISE_SHIFT),
    SHIFT_RIGHT(INFIX, OpPrec.BITWISE_SHIFT),
    UNSIGNED_SHIFT_RIGHT(INFIX, OpPrec.BITWISE_SHIFT),

    // Unary
    UNARY_PLUS(PREFIX, OpPrec.PREFIX_UNARY),
    UNARY_MINUS(PREFIX, OpPrec.PREFIX_UNARY),
    INCREMENT_PREFIX(PREFIX, OpPrec.PREFIX_UNARY),
    DECREMENT_PREFIX(PREFIX, OpPrec.PREFIX_UNARY),
    INCREMENT_POSTFIX(POSTFIX, OpPrec.POSTFIX),
    DECREMENT_POSTFIX(POSTFIX, OpPrec.POSTFIX),

    // Member/Structure Access
    MEMBER_ACCESS(POSTFIX, OpPrec.POSTFIX),
    SAFE_MEMBER_ACCESS(POSTFIX, OpPrec.POSTFIX),
    POINTER_MEMBER_ACCESS(POSTFIX, OpPrec.POSTFIX),
    SCOPE_RESOLUTION(POSTFIX, OpPrec.POSTFIX),

    // Common
    ARROW(INFIX, OpPrec.TERNARY_ARROW_ELVIS),           // For => style
    RANGE_TO(INFIX, OpPrec.COMPARISON_RANGE),           // For ..
    SPREAD(PREFIX, OpPrec.PREFIX_UNARY),                // For ...
    ELVIS(INFIX, OpPrec.TERNARY_ARROW_ELVIS),           // For ?: (elvis)
    TERNARY_QUESTION(INFIX, OpPrec.TERNARY_ARROW_ELVIS),// For ? or ?:
    TERNARY_COLON(INFIX, OpPrec.TERNARY_ARROW_ELVIS)    // For : of ?:
}